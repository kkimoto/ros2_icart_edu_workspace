#!/usr/bin/env python3
"""
Watchdog node for edu_robot.

Services:
  /icart_start   (std_srvs/srv/Trigger)  -> starts icart_mini_driver
  /icart_stop    (std_srvs/srv/Trigger)  -> stops icart_mini_driver
  /icart_restart (std_srvs/srv/Trigger)  -> restart icart_mini_driver
  /icart_status  (std_srvs/srv/Trigger)  -> report running/not-running
"""
import os
import signal
import subprocess
import time
from typing import Optional

import rclpy
from rclpy.node import Node
from std_srvs.srv import Trigger


class Watchdog(Node):
    def __init__(self):
        super().__init__('yp_spur_watchdog')
        self.get_logger().info('yp_spur_watchdog starting')

        self._icart_proc: Optional[subprocess.Popen] = None
        self._icart_cmd = ['ros2', 'run', 'icart_mini_driver', 'icart_mini_driver_node']

        # Services
        self.create_service(Trigger, 'icart_start', self._on_icart_start)
        self.create_service(Trigger, 'icart_stop', self._on_icart_stop)
        self.create_service(Trigger, 'icart_restart', self._on_icart_restart)
        self.create_service(Trigger, 'icart_status', self._on_icart_status)

    # --- Process helpers ---
    def _is_running(self) -> bool:
        return self._icart_proc is not None and self._icart_proc.poll() is None

    def _start_process(self) -> (bool, str):
        if self._is_running():
            return False, f'already running (pid={self._icart_proc.pid})'
        try:
            self.get_logger().info(f"Starting icart: {' '.join(self._icart_cmd)}")
            self._icart_proc = subprocess.Popen(
                self._icart_cmd,
                preexec_fn=os.setsid,  # new process group
            )
            return True, f'started pid={self._icart_proc.pid}'
        except Exception as e:
            self._icart_proc = None
            return False, f'failed to start: {e}'

    def _stop_process(self, timeout: float = 5.0) -> (bool, str):
        if not self._is_running():
            self._icart_proc = None
            return False, 'not running'

        pid = self._icart_proc.pid
        pgid = os.getpgid(pid)
        self.get_logger().info(f'Stopping icart pid={pid} pgid={pgid}')
        try:
            os.killpg(pgid, signal.SIGINT)  # graceful
        except Exception as e:
            self.get_logger().warn(f'graceful SIGINT failed: {e}')

        t0 = time.time()
        while time.time() - t0 < timeout:
            if self._icart_proc.poll() is not None:
                code = self._icart_proc.returncode
                self._icart_proc = None
                return True, f'exited (returncode={code})'
            time.sleep(0.1)

        # escalate
        try:
            os.killpg(pgid, signal.SIGTERM)
        except Exception:
            pass
        t1 = time.time()
        while time.time() - t1 < 2.0:
            if self._icart_proc.poll() is not None:
                code = self._icart_proc.returncode
                self._icart_proc = None
                return True, f'exited after SIGTERM (returncode={code})'
            time.sleep(0.1)

        try:
            os.killpg(pgid, signal.SIGKILL)
        except Exception:
            pass
        time.sleep(0.1)
        if self._icart_proc.poll() is None:
            return False, 'failed to kill process'
        else:
            code = self._icart_proc.returncode
            self._icart_proc = None
            return True, f'exited after SIGKILL (returncode={code})'

    # --- Service callbacks ---
    def _on_icart_start(self, req, resp):
        ok, msg = self._start_process()
        resp.success = ok
        resp.message = msg
        self.get_logger().info(f'icart_start -> {msg}')
        return resp

    def _on_icart_stop(self, req, resp):
        ok, msg = self._stop_process()
        resp.success = ok
        resp.message = msg
        self.get_logger().info(f'icart_stop -> {msg}')
        return resp

    def _on_icart_restart(self, req, resp):
        if self._is_running():
            ok, msg = self._stop_process()
            if not ok:
                resp.success = False
                resp.message = f'stop failed: {msg}'
                return resp
            time.sleep(0.5)
        ok, msg = self._start_process()
        resp.success = ok
        resp.message = msg
        self.get_logger().info(f'icart_restart -> {msg}')
        return resp

    def _on_icart_status(self, req, resp):
        if self._is_running():
            resp.success = True
            resp.message = f'running pid={self._icart_proc.pid}'
        else:
            resp.success = False
            resp.message = 'not running'
        return resp


def main(args=None):
    rclpy.init(args=args)
    node = Watchdog()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    # clean shutdown
    if node._is_running():
        node.get_logger().info('Stopping icart before shutdown')
        node._stop_process(timeout=2.0)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
